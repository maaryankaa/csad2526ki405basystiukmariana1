library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity uart_tx is
    port (
        clk        : in  std_logic;
        reset_n    : in  std_logic;
        baud_tick  : in  std_logic;
        tx_start   : in  std_logic;
        tx_data    : in  std_logic_vector(7 downto 0);
        txd_out    : out std_logic;
        tx_busy    : out std_logic
    );
end uart_tx;

architecture Behavioral of uart_tx is
    type state_type is (IDLE, START, DATA, STOP);
    signal state     : state_type := IDLE;
    signal bit_index : integer range 0 to 7 := 0;
    signal shift_reg : std_logic_vector(7 downto 0) := (others => '0');
    signal tx_reg    : std_logic := '1';
    signal busy_reg  : std_logic := '0';
begin
    process(clk, reset_n)
    begin
        if reset_n = '0' then
            state     <= IDLE;
            tx_reg    <= '1';
            busy_reg  <= '0';
            bit_index <= 0;
        elsif rising_edge(clk) then
            if baud_tick = '1' then
                case state is
                    when IDLE =>
                        tx_reg   <= '1';
                        busy_reg <= '0';
                        if tx_start = '1' then
                            shift_reg <= tx_data;
                            state     <= START;
                            busy_reg  <= '1';
                        end if;

                    when START =>
                        tx_reg <= '0';  -- старт-біт
                        state  <= DATA;

                    when DATA =>
                        tx_reg <= shift_reg(0);
                        shift_reg <= '0' & shift_reg(7 downto 1);
                        if bit_index = 7 then
                            bit_index <= 0;
                            state <= STOP;
                        else
                            bit_index <= bit_index + 1;
                        end if;

                    when STOP =>
                        tx_reg   <= '1'; -- стоп-біт
                        state    <= IDLE;
                        busy_reg <= '0';
                end case;
            end if;
        end if;
    end process;

    txd_out <= tx_reg;
    tx_busy <= busy_reg;
end Behavioral;
